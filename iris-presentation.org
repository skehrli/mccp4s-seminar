:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4
#+REVEAL_THEME: white
#+REVEAL_TRANS: slide
#+REVEAL_MIN_SCALE: 1.0
#+REVEAL_MAX_SCALE: 1.0
#+REVEAL_PLUGINS: (math)
#+OPTIONS: toc:nil num:nil timestamp:nil
:END:

#+TITLE: Iris
#+AUTHOR: Xinglu & Sascha

* What is Iris?
** Disclaimer
#+ATTR_REVEAL: :frag (appear)
- Iris is not a small project
- 123 papers and 21 doctoral theses
- Highly influential
  #+ATTR_REVEAL: :frag (appear)
  + 2023 Alonzo Church Award for Outstanding Contributions to Logic and Computation
  + 2025 Most Influential POPL Paper Award
    - awarded for most influential paper of last decade
** Iris in one sentence
#+ATTR_REVEAL: :frag (appear)
- Iris is a *generic higher-order concurrent separation logic*.
** Iris in one (longer) sentence
#+ATTR_REVEAL: :frag (appear)
Iris is a framework for
#+ATTR_REVEAL: :frag (appear)
+ foundational machine-checked proofs
+ of deep correctness properties
+ for fine-grained concurrent programs
+ in higher-order imperative languages
** Some Notes
#+ATTR_REVEAL: :frag (appear)
- formalized entirely in Rocq proof assistant
- example: type safety proof of (a realistic subset of) Rust formalized in Iris
- example: Perennial, framework for reasoning about crash safety, formalized in Iris
* Who is behind Iris?
:PROPERTIES:
:ID:       ab7c0539-4948-46c7-8fba-5591d366ef3a
:END:
#+attr_org: :width 600px
[[file:authors.png]]
* A Brief History of Separation logic
** What is Separation Logic?
#+ATTR_REVEAL: :frag (appear)
- extension of Hoare Logic
- allows reasoning about pointer-manipulating programs
- initially introduced by O'Hearn in 2001
- later extended to CSL
- solves two problems - Object Orientation and Concurrency
** Motivation: Why Separation Logic?
#+ATTR_REVEAL: :frag (appear)
- Consider program:
  #+BEGIN_SRC
  void f(int* x, int* y) {
    *x = 1;
    *y = 2;
  }
  #+END_SRC
- Naive Hoare logic spec:
  #+begin_src
{ true } f(x, y) { *x == 1 ^ *y == 2 }
  #+end_src
- What if $x == y$? Spec invalid!
- What we want instead:
  #+begin_src
{ "x and y disjoint" } f(x, y) { *x == 1 ^ *y == 2 }
  #+end_src

** Separation Logic: Notation
#+ATTR_REVEAL: :frag (appear)
 - $↦$ : points-to assertion (e.g. $x ↦ 5$)
   #+ATTR_REVEAL: :frag (appear)
   - memory location with name x has value 5
   - assertion provides exclusive ownership over x
 - $*$ : separating conjunction (e.g. $P * Q$)
   #+ATTR_REVEAL: :frag (appear)
   - like $P \land Q$
   - BUT P and Q must be satisfied in non-intersecting parts of heap
 - Can now formulate this:
        \begin{aligned}
        \{ x ↦ v_1 * y ↦ v_2 \}\ f(x, y)\ \{ x ↦ 1 * y ↦ 2 \}
        \end{aligned}
** Semantics of $*$
\begin{aligned}
(P * Q)(h) \iff \exists h_1, h_2.~ h = h_1 \uplus h_2 \land P(h_1) \land Q(h_2)
\end{aligned}
#+ATTR_REVEAL: :frag (appear)
- Heap can be split into disjoint parts $h1,\ h2$
- $P$ holds on $h1$, $Q$ on $h2$

** Frame Rule
\begin{aligned}
\frac{\{P\}~C~\{Q\}}{\{P * R\}~C~\{Q * R\}}
\end{aligned}

#+ATTR_REVEAL: :frag (appear)
- Simple, but encapsulates "ownership reasoning" of separation logic.
- Only possible because of ownership semantics of points-to assertion.
- example:
  \begin{aligned}
  \{x ↦ 0\}\ y := new\ (42)\ \{x ↦ 0 * y ↦ 42\}
  \end{aligned}
** SL \to CSL (O'Hearn, 2007)
#+ATTR_REVEAL: :frag (appear)
- Add parallel execution $\parallel$ (e.g. $C_1 \parallel C_2$)
- And this simple rule (parallel composition):
  \begin{aligned}
  \frac{\{P_1\}~C_1~\{Q_1\}\ldots \{P_n\}~C_n~\{Q_n\}}{\{P_1 * \ldots * P_n\}~C_1\parallel\ldots\parallel C_n~\{Q_1 * \ldots * Q_n\}}
  \end{aligned}
** Conclusion thus far
#+ATTR_REVEAL: :frag (appear)
- Convenient reasoning for shared heap where everyone operates on disjoint data
- But at some point, there *will* be shared data
** CSL: Reasoning about shared data
#+ATTR_REVEAL: :frag (appear)
- O'Hearns original CSL = SL + $\parallel$ + *resource invariants*
- critical region rule:
  \begin{aligned}
  \frac{\{(P * RI_r) \land B\}~C~\{Q * RI_r\}}{\{P\}~with\ r\ when\ B\ do\ C~\{Q\}}
  \end{aligned}
- shifts proof burden to coming up with a good resource invariant
- paper included correctness proof for simple concurrent queue
** Where are we now?
#+ATTR_REVEAL: :frag (appear)
- ppl impressed by capabilities of CSL, avalanche of subsequent work follows
- problem: every new paper/library came up with own separation logic
- Parkinson, 2010: CSL must be unified in a common framework
* Enter Iris: CSL Unified (Jung, 2015)
#+ATTR_REVEAL: :frag (appear)
- Iris is the unifying framework
- Goal of Iris: a minimal base logic for concurrent reasoning (subsuming all previous work)
- the premise: Monoids + Invariants are all you need
* Monoids + Invariants: Conceptually
#+ATTR_REVEAL: :frag (appear)
- assume shared memory location $a$
- goal: prove some concurrent program using $a$ correct
- idea: create a 'ghost location' $b$ representing $a$ and describe protocol on $b$
  #+ATTR_REVEAL: :frag (appear)
  + $b$ follows a certain structure (Monoid)
  + operation of Monoid defined by user to encode protocol
- idea 2: tie the state of $b$ to $a$ with invariants
* Monoids
** Reminder: (Commutative) Monoid Axioms
A (commutative) monoid $M = (|M|, \cdot, \bot, \varepsilon)$ is an algebraic structure with:
#+ATTR_REVEAL: :frag (appear)
- Carrier set $|M|$
- identity element $\epsilon$ with
  #+ATTR_REVEAL: :frag (appear)
  $\epsilon \cdot a = a$
- Binary operation $\cdot$ with
  #+ATTR_REVEAL: :frag (appear)
  $(a \cdot b) \cdot c = a \cdot (b \cdot c)$
  #+ATTR_REVEAL: :frag (appear)
  $a \cdot b = b \cdot a$
- zero element $\bot$ with
  #+ATTR_REVEAL: :frag (appear)
  $\bot \cdot a = \bot$
  #+ATTR_REVEAL: :frag (appear)
  $\bot \neq \epsilon$
** Observation: Heap is a Monoid
#+ATTR_REVEAL: :frag (appear)
- Carrier set:
  #+ATTR_REVEAL: :frag (appear)
  (finite partial) function from locations to values
  $$h : \text{Loc} \rightharpoonup \text{Val}$$
- Heap composition:
  #+ATTR_REVEAL: :frag (appear)
  $$(h_1 \cdot h_2)(l) = \begin{cases} h_1(l),\ \text{if } l \in dom(h_1) \\ h_2(l),\ \text{if } l \in dom(h_2) \\ \text{undefined},\ \text{else} \end{cases}$$
  #+ATTR_REVEAL: :frag (appear)
  (if $dom(h_1) \cap dom(h_2) = \emptyset$)
- Identity element $\epsilon \equiv \emptyset$
** Conclusion: Monoids as Unifying Abstraction for State
:PROPERTIES:
:ID:       48f93f91-3753-41cd-92aa-d6dfb0f9b2f8
:END:
#+ATTR_REVEAL: :frag (appear)
- arbitrary protocols
- provides 'primitive', composable monoids (exclusive, fractional, authoritative, ...)
- build up sophisticated structures
        #+ATTR_HTML: :width 80%
        #+attr_org: :width 600px
        [[file:sts_monoid.png]]
* Example
** Setting
#+ATTR_REVEAL: :frag (appear)
- Iris instantiated with default 'heap lang'
- Normal heap monoid for physical state
- 'Authoritative Monoid' for ghost state
- beware of informality: full formality of example would take hours
** Example: Program
:PROPERTIES:
:reveal_extra_attr: data-transition="none"
:END:
#+ATTR_REVEAL: :frag (appear)
- counter module with functions
  #+begin_src
  newCounter() := ref (0)
  incr l       := let n <- !l in
                    if CAS(l, n, n+1) then n
                    else incr l
  #+end_src
- want to prove spec
  #+ATTR_REVEAL: :frag appear
  \[
  \{True\}\ \texttt{newCounter()}\ \{l. \ Inv(l, 0)\}
  \]

  #+ATTR_REVEAL: :frag appear
  \[
  \{Inv(l, n)\}\
  \texttt{incr l}\
  \{u. \ Inv(l, n+1)\}
  \]
- what should Inv(l, n) be?
  #+ATTR_REVEAL: :frag (appear)
  - 1. idea: $Inv(l, n) := l \mapsto n$
    #+ATTR_REVEAL: :frag (appear)
    + problem: only persistent knowledge useful in concurrent setting
** Example: Program
:PROPERTIES:
:reveal_extra_attr: data-transition="none"
:END:
- counter module with functions
  #+begin_src
  newCounter() := ref (0)
  incr l       := let n <- !l in
                    if CAS(l, n, n+1) then n
                    else incr l
  #+end_src
- want to prove spec
  \[
  \{True\}\ \texttt{newCounter()}\ \{l. \ Inv(l, 0)\}
  \]

  \[
  \{Inv(l, n)\}\
  \texttt{incr l}\
  \{u. \ u \geq n * Inv(l, n+1)\}
  \]
- what should Inv(l, n) be?
  - 2. idea: lower bound $Inv(l, n) := \exists m.\ l \mapsto m \land m \geq n$
    #+ATTR_REVEAL: :frag (appear)
    - problem: cannot update \(n\) to \(n+1\)
** Example: Program
#+ATTR_REVEAL: :frag (appear)
- What is invariant about a counter?
- Solution: counter owns itself
- Idea
   #+ATTR_REVEAL: :frag (appear)
  - Ghost location
  - Entangled pair for variable
** Solution: Authoritative monoid
#+ATTR_REVEAL: :frag (appear)
- Monoid construction itself very technical
- Rules:
  #+ATTR_REVEAL: :frag (appear)
  \(True \Rrightarrow \exists\gamma.\boxed{\bullet n}_g^\gamma * \boxed{\circ n}_{g}^{\gamma} \
  \)
  #+ATTR_REVEAL: :frag (appear)
  \(\boxed{\bullet n \cdot \circ m}_g^\gamma \implies n = m\
  \)
  #+ATTR_REVEAL: :frag (appear)
  \(\boxed{\bullet n \cdot \circ n}_g^\gamma \Rrightarrow \boxed{\bullet n' \cdot \circ n'}_g^\gamma
  \)
- Ghost resources (in general) can be split and combined arbitrarily: \(\boxed{t \cdot
  u}_{g} \iff  \boxed{t}_{g} \ast \boxed{u}_{g}\)
- Ghost state inside invariant \(\boxed{\bullet m}_{g}^{\gamma}\)
- Ghost state outside invariant \(\boxed{\circ n}_{g}^{\gamma}\)
** Example: Hoare Triple Spec
#+ATTR_REVEAL: :frag (appear)
- \(Inv(l) := \boxed{\exists m. \ l \mapsto m \ast  \boxed{\bullet m}_g^{\gamma} }\)
- \( \{ True \} \ \mathtt{newCounter}() \ \{ l. \ \boxed{\circ
  0}_{g}^{\gamma} \ast Inv(l) \} \)
- \(
  \{\boxed{\circ n}_{g}^{\gamma} \ast Inv(l)\}\
  \texttt{incr l}\
  \{u. \ u \geq n \ast \boxed{\circ (n+1)}_{g}^{\gamma} \ast Inv(l)\}
  \)
** Invariants in Iris
#+ATTR_REVEAL: :frag (appear)
- Allocation rule
   #+ATTR_REVEAL: :frag (appear)
   - Create invariant and give up ownership of \(R\)
        \[
        \frac{\left\{ \boxed{R} \ast P \right\} \ e \ \left\{ Q \right\}
        }{\left\{ R \ast P \right\} \ e \ \left\{ Q \right\} }
        \]

- Invariant rule
   #+ATTR_REVEAL: :frag (appear)
   \[
   \frac{\left\{ R \ast P \right\} \ e \ \left\{ R \ast Q \right\} \qquad e
   \text{ atomic} }{\left\{ \boxed{R} \ast P \right\} \ e \ \left\{ \boxed{R} \ast Q \right\} }
   \]
   #+ATTR_REVEAL: :frag (appear)
  + Open invariant to acquire temporary ownership of shared resource
  + Once invariant is reestablished, it can be closed again


** Example: Proof of =newCounter()=
- Recall
  - \(Inv(l) := \boxed{\exists m. \ l \mapsto m \ast \boxed{\bullet m}_{g}^{\gamma}} \)
  - \(True \Rrightarrow \exists\gamma.\boxed{\bullet n}_g^\gamma * \boxed{\circ n}_{g}^{\gamma} \)
#+ATTR_REVEAL: :frag appear
- \( \{ True \} \ \mathtt{newCounter}() \ \{ l. \ \boxed{\circ
  0}_{g}^{\gamma} \ast Inv(l) \} \)
#+ATTR_REVEAL: :frag appear
- \(\{ True \}\)
  #+ATTR_REVEAL: :frag appear
  \(\{\boxed{\bullet 0}_g^\gamma * \boxed{\circ 0}_{g}^{\gamma}\}\)
- \(\ \mathtt{ref}(0)\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{l.\ l\mapsto 0 * \boxed{\bullet 0}_g^\gamma * \boxed{\circ 0}_{g}^{\gamma}\right\}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{ l. \ \boxed{\circ0}_{g}^{\gamma} \ast \boxed{\exists m. \ l \mapsto m \ast \boxed{\bullet m}_g^{\gamma}}\right\}\)

** Example: Proof of =incr l=
- Recall
  - \(Inv(l) := \boxed{\exists m. \ l \mapsto m \ast \boxed{\bullet m}_{g}^{\gamma}} \)
    \begin{align*}
     \mathtt{incr} \ l := \ &\mathtt{let} \ n \gets !l \ \mathtt{in} \\
                    &\mathtt{if} \ \mathtt{CAS}(l, n, n+1) \ \mathtt{then} \ n\\
                    &\mathtt{else} \ \mathtt{incr} \ l
   \end{align*}

#+ATTR_REVEAL: :frag (appear)
- \( \left\{\boxed{\circ n}_g^{\gamma }* Inv(l)\right\} \ \mathtt{incr}\ l \ \left\{ u.\ \boxed{\circ
  (n+1)}_{g}^{\gamma} \ast Inv(l) \right\} \)

#+ATTR_REVEAL: :frag (appear)
- \(\left\{\boxed{\circ n}_g^{\gamma }* Inv(l)\right\}\)
- \(\ \mathtt{let\ n:=!\ l}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{k.\ \boxed{\circ n}_g^{\gamma }* Inv(l)\right\}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{k.\ \boxed{\circ n}_g^{\gamma }* \exists m. \ l \mapsto m \ast \boxed{\bullet m}_{g}^{\gamma} \right\}\)
  #+ATTR_REVEAL: :frag appear
  \(\{k.\ l\mapsto k * \boxed{\bullet k \cdot\circ n}_g^\gamma \}\)
** Proof of =Incr l=
- Previous State:

  \(\{k.\ l\mapsto k * \boxed{\bullet k \cdot\circ n}_g^\gamma \}\\\)
  \(\ \mathtt{CAS(l,n,n+1)}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{true.\ l\mapsto k+1 * \boxed{\bullet k \cdot\circ n}_g^\gamma \right\}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{true.\ l\mapsto k+1 * \boxed{\bullet (k+1) \cdot\circ (n+1)}_g^\gamma \right\}\)
- \(\ \mathtt{then\ n}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{u.\ \boxed{\circ(n+1)}_{g}^{\gamma} * \boxed{\exists m. \ l \mapsto m \ast \boxed{\bullet m}_g^{\gamma}}\right\}\)
  #+ATTR_REVEAL: :frag appear
  \(\left\{u.\ \boxed{\circ(n+1)}_{g}^{\gamma} * Inv(l)\right\}\)
* What we didn't talk about
#+ATTR_REVEAL: :frag (appear)
- Iris is largely about minimal base logic to derive expressive reasoning from
- we didn't look at the base logic at all
  #+ATTR_REVEAL: :frag (appear)
  + soundness of the logic
  + this all exists, formalized in Rocq, but out of scope (of even the og 2015 paper)
- logical atomicity
* Discussion
** Strengths/Limitations
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+ATTR_REVEAL: :frag appear
*Strengths*
#+ATTR_REVEAL: :frag (appear)
- clear goal, no overpromise
- tremendous impact
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
#+ATTR_REVEAL: :frag appear
*Limitations*
#+ATTR_REVEAL: :frag (appear)
- no real engineering applications so far (more metatheory)
- Logic overly complicated in 2015 paper (Iris 1.0), later simplified
- (Partial Commutative) Monoids ended up not being all you need
- did it really unify CSL?
  #+ATTR_ORG: :width 600px
  #+ATTR_HTML: :width 100%
  [[file:csl-family-tree.png]]
#+REVEAL_HTML: </div>
