:REVEAL_PROPERTIES:
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_VERSION: 4
#+REVEAL_THEME: moon
#+REVEAL_TRANS: slide
#+REVEAL_MIN_SCALE: 1.0
#+REVEAL_MAX_SCALE: 1.0
#+REVEAL_PLUGINS: (math)
#+OPTIONS: toc:nil num:nil timestamp:nil
:END:

#+TITLE: Iris
#+AUTHOR: Xinglu & Sascha

* What is Iris?
** Disclaimer
#+ATTR_REVEAL: :frag (appear)
- Iris is not a small project
- 123 papers and 21 doctoral theses
- Highly influential
  #+ATTR_REVEAL: :frag (appear)
  + 2023 Alonzo Church Award for Outstanding Contributions to Logic and Computation
  + 2025 Most Influential POPL Paper Award
    - awarded for most influential paper of last decade
** Iris in one sentence
#+ATTR_REVEAL: :frag (appear)
- Iris is a *generic higher-order concurrent separation logic*.
** Iris in one (longer) sentence
#+ATTR_REVEAL: :frag (appear)
Iris is a framework for
#+ATTR_REVEAL: :frag (appear)
+ foundational machine-checked proofs
+ of deep correctness properties
+ for fine-grained concurrent programs
+ in higher-order imperative languages
** Some Notes
#+ATTR_REVEAL: :frag (appear)
- formalized entirely in Rocq proof assistant
- example: type safety proof of (a realistic subset of) Rust formalized in Iris
- example: Perennial, framework for reasoning about crash safety, formalized in Iris
* Who is behind Iris?
:PROPERTIES:
:ID:       ab7c0539-4948-46c7-8fba-5591d366ef3a
:END:
#+attr_org: :width 600px
[[file:authors.png]]
* A Brief History of Separation logic
** What is Separation Logic?
#+ATTR_REVEAL: :frag (appear)
- extension of Hoare Logic
- allows reasoning about pointer-manipulating programs
- initially introduced by O'Hearn in 2001
- later extended to CSL
- solves two problems - Object Orientation and Concurrency
** Motivation: Why Separation Logic?
#+ATTR_REVEAL: :frag (appear)
- Consider program:
  #+BEGIN_SRC c
  void f(int* x, int* y) {
    *x = 1;
    *y = 2;
  }
  #+END_SRC
- Naive Hoare logic spec:
  #+begin_src c
{ true } f(x, y) { *x == 1 ^ *y == 2 }
  #+end_src
- What if $x == y$? Spec invalid!
- What we want instead:
  #+begin_src c
{ "x and y disjoint" } f(x, y) { *x == 1 ^ *y == 2 }
  #+end_src

** Separation Logic: Notation
#+ATTR_REVEAL: :frag (appear)
 - $↦$ : points-to assertion (e.g. $x ↦ 5$)
   #+ATTR_REVEAL: :frag (appear)
   - memory location with name x has value 5
   - assertion provides exclusive ownership over x
 - $*$ : separating conjunction (e.g. $P * Q$)
   #+ATTR_REVEAL: :frag (appear)
   - like $P \land Q$
   - BUT P and Q must be satisfied in non-intersecting parts of heap
 - Can now formulate this:
        \begin{aligned}
        \{ x ↦ v_1 * y ↦ v_2 \}\ f(x, y)\ \{ x ↦ 1 * y ↦ 2 \}
        \end{aligned}
** Semantics of $*$
\begin{aligned}
(P * Q)(h) \iff \exists h_1, h_2.~ h = h_1 \uplus h_2 \land P(h_1) \land Q(h_2)
\end{aligned}
#+ATTR_REVEAL: :frag (appear)
- Heap can be split into disjoint parts $h1,\ h2$
- $P$ holds on $h1$, $Q$ on $h2$

** Frame Rule
\begin{aligned}
\frac{\{P\}~C~\{Q\}}{\{P * R\}~C~\{Q * R\}}
\end{aligned}

#+ATTR_REVEAL: :frag (appear)
- Simple, but encapsulates "ownership reasoning" of separation logic.
- Only possible because of ownership semantics of points-to assertion.
- example:
  \begin{aligned}
  \{x ↦ 0\}\ y := new\ (42)\ \{x ↦ 0 * y ↦ 42\}
  \end{aligned}
** SL \to CSL (O'Hearn, 2007)
#+ATTR_REVEAL: :frag (appear)
- Add parallel execution $\parallel$ (e.g. $C_1 \parallel C_2$)
- And this simple rule (parallel composition):
  \begin{aligned}
  \frac{\{P_1\}~C_1~\{Q_1\}\ldots \{P_n\}~C_n~\{Q_n\}}{\{P_1 * \ldots * P_n\}~C_1\parallel\ldots\parallel C_n~\{Q_1 * \ldots * Q_n\}}
  \end{aligned}
** Conclusion thus far
#+ATTR_REVEAL: :frag (appear)
- Convenient reasoning for shared heap where everyone operates on disjoint data
- But at some point, there *will* be shared data
** CSL: Reasoning about shared data
#+ATTR_REVEAL: :frag (appear)
- O'Hearns original CSL = SL + $\parallel$ + *resource invariants*
- critical region rule:
  \begin{aligned}
  \frac{\{(P * RI_r) \land B\}~C~\{Q * RI_r\}}{\{P\}~with\ r\ when\ B\ do\ C~\{Q\}}
  \end{aligned}
- shifts proof burden to coming up with a good resource invariant
- paper included correctness proof for simple concurrent queue
** Where are we now?
#+ATTR_REVEAL: :frag (appear)
- ppl impressed by capabilities of CSL, avalanche of subsequent work follows
- problem: every new paper/library came up with own separation logic
- Parkinson, 2010: CSL must be unified in a common framework
* Enter Iris: CSL Unified (Jung, 2015)
#+ATTR_REVEAL: :frag (appear)
- Iris is the unifying framework
- Goal of Iris: a minimal base logic for concurrent reasoning (subsuming all previous work)
- the premise: Monoids + Invariants are all you need
* Monoids + Invariants: Conceptually
#+ATTR_REVEAL: :frag (appear)
- assume shared memory location $a$
- goal: prove some concurrent program using $a$ correct
- idea: create a 'ghost location' $b$ representing $a$ and describe protocol on $b$
  #+ATTR_REVEAL: :frag (appear)
  + $b$ follows a certain structure (Monoid)
  + operation of Monoid defined by user to encode protocol
- idea 2: tie the state of $b$ to $a$ with invariants
* Monoids
** Reminder: (Commutative) Monoid Axioms
A (commutative) monoid $M = (|M|, \cdot, \bot, \varepsilon)$ is an algebraic structure with:
#+ATTR_REVEAL: :frag (appear)
- Carrier set $|M|$
- identity element $\epsilon$ with
  #+ATTR_REVEAL: :frag (appear)
  $\epsilon \cdot a = a$
- Binary operation $\cdot$ with
  #+ATTR_REVEAL: :frag (appear)
  $(a \cdot b) \cdot c = a \cdot (b \cdot c)$
  #+ATTR_REVEAL: :frag (appear)
  $a \cdot b = b \cdot a$
- zero element $\bot$ with
  #+ATTR_REVEAL: :frag (appear)
  $\bot \cdot a = \bot$
  #+ATTR_REVEAL: :frag (appear)
  $\bot \neq \epsilon$
** Observation: Heap is a Monoid
#+ATTR_REVEAL: :frag (appear)
- Carrier set:
  #+ATTR_REVEAL: :frag (appear)
  (finite partial) function from locations to values
  $$h : \text{Loc} \rightharpoonup \text{Val}$$
- Heap composition:
  #+ATTR_REVEAL: :frag (appear)
  $$(h_1 \cdot h_2)(l) = \begin{cases} h_1(l),\ \text{if } l \in dom(h_1) \\ h_2(l),\ \text{if } l \in dom(h_2) \\ \text{undefined},\ \text{else} \end{cases}$$
  #+ATTR_REVEAL: :frag (appear)
  (if $dom(h_1) \cap dom(h_2) = \emptyset$)
- Identity element $\epsilon \equiv \emptyset$
** Conclusion: Monoids as Unifying Abstraction for State
:PROPERTIES:
:ID:       48f93f91-3753-41cd-92aa-d6dfb0f9b2f8
:END:
#+ATTR_REVEAL: :frag (appear)
- arbitrary protocols
- provides 'primitive', composable monoids (exclusive, fractional, authoritative, ...)
- build up sophisticated structures
        #+ATTR_HTML: :width 80%
        #+attr_org: :width 600px
        [[file:sts_monoid.png]]
* Example: Setting
#+ATTR_REVEAL: :frag (appear)
- Iris instantiated with default 'heap lang'
- Normal heap monoid for physical state
- 'Authoritative Monoid' for ghost state
- beware of informality: full formality of example would take hours
* Example
- show example program, what triple to prove
- mention partial correctness (even {True}C{True} shows doesn't crash)
- construct ghost monoid for protocol
- show invariants (define invariant, show rules e.g. unboxing invariant)
- execute proof
  + change ghost state (introduce view shifts)
  + ...
** Invariants
- Allow us to reason about shared state
- Notation: \(\boxed{R}\)
- Duplicable: \(\boxed{R} \vdash \boxed{R} \ast \boxed{R}\)

** Working with Invariants
\[
\frac{\left\{ R \ast P \right\} \ e \ \left\{ R \ast Q \right\} \qquad e
\text{ atomic} }{\left\{ \boxed{R} \ast P \right\} \ e \ \left\{ \boxed{R} \ast Q \right\} }
\]

- Invariant rule
   #+ATTR_REVEAL: :frag (appear)
  + Open invariant to acquire temporary ownership of shared resource
  + Once invariant is reestablished, it can be closed again

** Working with Invariants (cont'd)
\[
\frac{\left\{ \boxed{R} \ast P \right\} \ e \ \left\{ Q \right\}
}{\left\{ R \ast P \right\} \ e \ \left\{ Q \right\} }
\]

- Allocation rule
   #+ATTR_REVEAL: :frag (appear)
   - Create invariant and give up ownership of \(R\)
       
** Ghost state
#+ATTR_REVEAL: :frag (appear)
- For element \(a\) in Monoid, exists corresponding ghost
  assertion \(\boxed{a}_{g}\)
  + Asserts \(a \neq \bot\) & ownership of an \(a\) fragment of
    the global ghost state
- Can update global ghost state
   + Expressed as /view shifts/
   + \(P \Rrightarrow Q\): Can update the state from \(P\) to \(Q\) without
     changing program state
- Ghost resources can be split and combined arbitrarily: \(\boxed{t \cdot
  u}_{g} \iff  \boxed{t}_{g} \ast \boxed{u}_{g}\)

** Ghost state
\[
\frac{a \rightsquigarrow B}{\boxed{a}_{g} \Rrightarrow \exists b \in B. \boxed{b}_{g}}
\]

#+ATTR_REVEAL: :frag (appear)
- \(a \rightsquigarrow B\) is shortand for \(\Box \forall a_{f}.  \ a
  \cdot a_{f} \neq \bot \implies \exists b \in B. \ b \cdot a_{f} \neq
  \bot\)
- Always modality \(\Box P\)
  + \(P\) holds; does not assert ownership
  + Duplicatable
- Frame update rule
  + State obtained by composing the contributions of all threads is a
    valid element (not \(\bot\))

** Example
#+begin_src c
{ l ↦ n }
l ← addOne(l) ‖ l ← addOne(l)
!l
{ v. v = n + 2 }
#+end_src

#+ATTR_REVEAL: :frag (appear)
- Use the /authoritative monoid/ (use ghost state instead with heap monoid instantiation)
   #+ATTR_REVEAL: :frag (appear)
  + Ghost variables come in pairs \(\gamma \hookrightarrow_{\bullet} n \ast \gamma    \hookrightarrow_{\circ} n\)
  + One owns the global authoritative state of ghost resource
  + Everyone else owns fragments of resource
- Invariant: \(\exists n_{1}, n_{2}. (n_{1} + n_{2}) \ast \gamma_{1} \hookrightarrow_{\bullet} n_{1} \ast
  \gamma_{2} \hookrightarrow_{\bullet} n_{2}\)
* Logical atomicity
- transactions
- this exists
* What we didn't talk about
#+ATTR_REVEAL: :frag (appear)
- Iris is largely about minimal base logic to derive expressive reasoning from
- we didn't look at the base logic at all
  #+ATTR_REVEAL: :frag (appear)
  + soundness of the logic
  + this all exists, formalized in Rocq, but out of scope (of even the og 2015 paper)
* Discussion
** Strengths/Limitations
#+REVEAL_HTML: <div class="column" style="float:left; width: 50%">
#+ATTR_REVEAL: :frag appear
*Strengths*
#+ATTR_REVEAL: :frag (appear)
- clear goal, no overpromise
- tremendous impact
#+REVEAL_HTML: </div>
#+REVEAL_HTML: <div class="column" style="float:right; width: 50%">
#+ATTR_REVEAL: :frag appear
*Limitations*
#+ATTR_REVEAL: :frag (appear)
- no real engineering applications so far (more metatheory)
- Logic overly complicated in 2015 paper (Iris 1.0), later simplified
- (Partial Commutative) Monoids ended up not being all you need
- did it really unify CSL?
  #+ATTR_ORG: :width 600px
  #+ATTR_HTML: :width 100%
  [[file:csl-family-tree.png]]
#+REVEAL_HTML: </div>

=fetchAndAdd= atomic
Proof outline using Ex(X) monoid

{ True }
let x = ref(0) in
{ \(x \mapsto 0\) }
// Allocate ghost resources
{ \(x \mapsto 0 \ \ast \ \boxed{\gamma_{1} \mapsto 0}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto 0}_{g}\) }
// Allocate invariant
\(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \
\boxed{\gamma_{2} \mapsto  n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)

// Duplicate invariant
\(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1} \mapsto
n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)
 \(\ast \)
\(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1} \mapsto
n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)

// Par rule
\(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1} \mapsto
n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)  \(\Vert\) \(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1} \mapsto
n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)

// Open invariant
{ \(x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1} \mapsto n_{1}}_{g} \ \ast \
\boxed{\gamma_{2} \mapsto n_{2}}_{g} \) }    \(\Vert\)    {\(\ x \mapsto n_{1} + n_{2} \ * \ \boxed{\gamma_{1}
\mapsto n_{1}}_{g} \ \ast \
\boxed{\gamma_{2} \mapsto n_{2}}_{g}\) }

// ??? We don't know what value x points to
x ← fetchAndAdd(x,2)                    \(\Vert\) x ← fetchAndAdd(x,2)


// Close invariant
\(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \
\boxed{\gamma_{1} \mapsto n_{1}}_{g} \ \ast \ \boxed{\gamma_{2}
\mapsto n_{2}}_{g}}\)  \(\Vert\) \(\boxed{\exists n_{1}, n_{2}. x \mapsto n_{1} + n_{2} \ * \
\boxed{\gamma_{1} \mapsto n_{1}}_{g} \ \ast \ \boxed{\gamma_{2} \mapsto n_{2}}_{g}}\)



!x
{ v. v = 4 }
